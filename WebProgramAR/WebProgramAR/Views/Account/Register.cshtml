@model WebProgramAR.Models.UserModel

@{
    ViewBag.Title = "Register";

    List<WebProgramAR.Entidades.Pais> listaPaises = (List<WebProgramAR.Entidades.Pais>)ViewBag.Paises;
    List<WebProgramAR.Entidades.Provincia> listaProvincias = (List<WebProgramAR.Entidades.Provincia>) ViewBag.Provincias;
    List<WebProgramAR.Entidades.Localidad> listaLocalidades = (List<WebProgramAR.Entidades.Localidad>)ViewBag.Localidades;
}

<h2>Crear una Cuenta Nueva</h2>
<p>
    Use el siguiente formulario para crear una nueva cuenta. 
</p>
<p>
    La contraseña requiere como minimo de @Membership.MinRequiredPasswordLength caracteres.
</p>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/funciones.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true, "Creacion de cuenta insatisfactoria. Verifique los datos ingresados e intente nuevamente.")
    <div class="sectionSpace">
        <fieldset>
            <legend>Informacion de la Cuenta</legend>

            <div class="editor-label">
                @Html.LabelFor(m => m.UserName)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.UserName)
                @Html.ValidationMessageFor(m => m.UserName)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Email)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Email)
                @Html.ValidationMessageFor(m => m.Email)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Password)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.Password)
                @Html.ValidationMessageFor(m => m.Password)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.ConfirmPassword)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.ConfirmPassword)
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>

            
        </fieldset>
    </div>
    <div class="sectionSpace">
        <div class="SameSectionSpace">
        <fieldset>
            <legend>Informacion del Usuario</legend>

            <div class="editor-label">
                @Html.LabelFor(m => m.Nombre)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Nombre)
                @Html.ValidationMessageFor(m => m.Nombre)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Apellido)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Apellido)
                @Html.ValidationMessageFor(m => m.Apellido)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.FechaNac)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.FechaNac, new { @class = "date-picker-needed" })
                @Html.ValidationMessageFor(m => m.FechaNac)
            </div>
        </fieldset>
        </div>
        <div class="SameSectionSpace">
        <fieldset>
            <div class="editor-label">
                @Html.LabelFor(m => m.Pais)
            </div>
            <div class="editor-field">
                

                 @Html.DropDownListFor(model => model.Pais,
                                listaPaises.Select(option => new SelectListItem
                    {
                        Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                        Value = option.PaisId.ToString(),
                        Selected = ((Model != null) && (option.PaisId == Model.Pais))
                    }))

                    @Html.ValidationMessageFor(m => m.Localidad)


                @Html.ValidationMessageFor(m => m.Pais)
            </div>
             <div id="listProvincias" style="display:none">
                <div class="editor-label">
                    @Html.LabelFor(m => m.Provincia)
                </div>
                <div class="editor-field">
                    

                    @Html.DropDownListFor(model => model.Provincia,
                                        listaProvincias.Select(option => new SelectListItem
                    {
                        Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                        Value = option.ProvinciaId.ToString(),
                        Selected = ((Model != null) && (option.ProvinciaId == Model.Provincia))
                    }))

                    @Html.ValidationMessageFor(m => m.Provincia)
                </div>
            </div>
            <div  id="listLocalidades"  style="display:none">
                <div class="editor-label">
                    @Html.LabelFor(m => m.Localidad)
                </div>
                <div class="editor-field">                  

                    
                    @Html.DropDownListFor(model => model.Localidad,
                                        listaLocalidades.Select(option => new SelectListItem
                    {
                        Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                        Value = option.LocalidadId.ToString(),
                        Selected = ((Model != null) && (option.LocalidadId == Model.Localidad))
                    }))

                    @Html.ValidationMessageFor(m => m.Localidad)
                </div>
            </div>

        </fieldset>
        </div>
    </div>
    <p>
        <input type="submit" value="Registrar" class="saveButton"/>
    </p>
}
<script type="text/javascript">
    convertSelect("Pais");
    convertSelect("Provincia");
    convertSelect("Localidad");
    $("#FechaNac").datepicker();


    function OnChangeDo(div) {

    
        if (div.attr('id') == "Pais") {

            var pais = $("#selectBox_Pais").attr("rel");


            $.ajax({
                url: '@Url.Action("GetProvinciasByPais")',
                data: " { paisId: '" + pais + "'}",
                contentType: 'application/json',
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    alert(data);

                    var provincias = (typeof data) == 'string' ? eval('(' + data + ')') : data;

                    for (var i = 0; i < provincias.length; i++) {
                        var val = provincias[i].Id;
                        var text = provincias[i].Value;
                        $("#drpDwProvinciaId").get(0).options[$("#drpDwProvinciaId").get(0).options.length] = new Option(text, val);
                    }


                }
            });
            $("#listProvincias").show();
            return;
        }
        if (div.attr('id') == "Provincia") {
            var obj = [];
            obj.provinciaId = $("#Provincia").val();
            obj.paisId = $("#Pais").val();

            var pais = $("#selectBox_Pais").attr("rel");
            var prov = $("#selectBox_Provincia").attr("rel");

            $.ajax({
                url: '@Url.Action("GetLocalidadesByProvinciaByPais")',
                data: " { paisId: '" + pais + "', provinciaId: '" + prov + "' }",
                contentType: 'application/json',
                dataType: 'json',
                success: function (data) {  }
            });
            $("#listLocalidades").show();
            return;
        }

    }

</script>
