@model WebProgramAR.Entidades.ReglasSeguridad
           
@using WebProgramAR.Helpers           

@{
    List<WebProgramAR.Entidades.Tabla> listaTabla = (List<WebProgramAR.Entidades.Tabla>)ViewBag.ListaTablas;
    List<WebProgramAR.Entidades.Columna> listaColumna = (List<WebProgramAR.Entidades.Columna>)ViewBag.Columnas;
    List<WebProgramAR.Entidades.Comparador> listaComparador = (List<WebProgramAR.Entidades.Comparador>)ViewBag.Comparadores;
    List<WebProgramAR.Entidades.TipoUsuario> listaTipoUsuario = (List<WebProgramAR.Entidades.TipoUsuario>)ViewBag.ListaTipoUsuarios;
}

<script type="text/javascript">
    $("<option value='-1' selected='selected'>Seleccion una Opcion</option>").prependTo("#TablaId");
    convertSelect("TablaId");
    convertSelect("TipoUsuarioCreate");
    $("#Usuario_FechaNacimiento").datepicker();
    $("#Usuario_FechaNacimiento").keypress(function (event) {
        var charCode = (event.which) ? event.which : event.keyCode
        if (charCode == 8) return false; //  backspace
        if (charCode == 46) return false; // delete
    });
    function reInitColumnas() {
        $("#ColumnaId").val("");
        $("#ColumnaId").attr("rel", "");
    }
    function reInitComparadores() {
        $("#ComparadorId").val("");
        $("#ComparadorId").attr("rel", "");
    }
    function OnChangeDo(div) {
        if ($(div).attr("rel") != "-1") {
            if (div.attr('id') == "TablaId") {
                var tabla = $("#selectBox_TablaId").attr("rel");
                $.ajax({
                    url: '@Url.Action("GetColumnasByTabla")',
                    data: " { tablaId: '" + tabla + "'}",
                    contentType: 'application/json',
                    type: 'POST',
                    dataType: 'json',
                    success: function (data) {
                        $("#listColumnas .tzSelect").remove();
                        $("#ColumnaId").children().remove();
                        var columnas = (typeof data) == 'string' ? eval('(' + data + ')') : data;
                        for (var i = 0; i < columnas.length; i++) {
                            var val = columnas[i].Id;
                            var text = columnas[i].Value;
                            $("#ColumnaId").get(0).options[$("#ColumnaId").get(0).options.length] = new Option(text, val);
                        }
                        $("<option value='-1' selected='selected'>Seleccion una Opcion</option>").prependTo("#ColumnaId");
                        convertSelect("ColumnaId", 2);
                        reInitLocalidad();
                    }
                });
                $("#listColumnas").show();
                return;
            }
            if (div.attr('id') == "ColumnaId") {
                var col = $("#selectBox_ColumnaId").attr("rel");
                $.ajax({
                    url: '@Url.Action("GetComparadoresByColumna")',
                    data: " { colId: '" + col + "'}",
                    contentType: 'application/json',
                    type: 'POST',
                    dataType: 'json',
                    success: function (data) {
                        $("#listComparadores .tzSelect").remove();
                        $("#ComparadorId").children().remove();
                        var comparadores = (typeof data) == 'string' ? eval('(' + data + ')') : data;
                        for (var i = 0; i < comparadores.length; i++) {
                            var val = comparadores[i].Id;
                            var text = comparadores[i].Value;
                            $("#ComparadorId").get(0).options[$("#ComparadorId").get(0).options.length] = new Option(text, val);
                        }
                        $("<option value='-1' selected='selected'>Seleccion una Opcion</option>").prependTo("#ComparadorId");
                        convertSelect("ComparadorId", 2);
                        reInitLocalidad();
                    }
                });
                $("#listComparadores").show();
                return;
            }           
        }
    }

    $("#UsuarioIdAutoComplete").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("GetUsuariosByNombreUsuario")',
                data: " {user: '" + request.term + "' }",
                contentType: 'application/json',
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Value,
                            value: item.Id
                        }
                    }));
                }
            })

        },
        scrollHeight: 10,
        minChars: 1,
        delay: 100,
        type: 'POST',
        selectFirst: false,
        select: function (event, ui) {
            $("#UsuarioIdAutoComplete").val(ui.item.label);
            $("#UsuarioId").val(ui.item.value);
            $("#UsuarioIdAutoComplete").attr("rel", ui.item.value);
        },
        change: function (event, ui) {
            if (ui.item != undefined) {
                $("#UsuarioIdAutoComplete").val(ui.item.label);
                $("#UsuarioIdAutoComplete").attr("rel", ui.item.value);
                $("#UsuarioId").val(ui.item.value);
            }
        }
    });
            
</script>

<div class="editor-label">
    @Html.LabelFor(m => m.TablaId)
</div>
<div class="editor-field">

        @Html.DropDownListWithValidationFor(model => model.TablaId, listaTabla.Select(option => new SelectListItem
        {
            Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
            Value = option.TablaId.ToString(),
            Selected = ((Model != null) && (option.TablaId == Model.TablaId))
        }), new { @id = "TablaId", @style = "display:none" })

        @Html.ValidationMessageFor(m => m.TablaId)
</div>

<div id="listColumnas" style="display:none">
<div class="editor-label">
    @Html.LabelFor(m => m.ColumnaId)
</div>
<div class="editor-field">
     @Html.DropDownListWithValidationFor(model => model.ComparadorId, listaComparador.Select(option => new SelectListItem
        {
            Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
            Value = option.ComparadorId.ToString(),
            Selected = ((Model != null) && (option.ComparadorId == Model.ComparadorId))
        }), new { @id = "ColumnaId", @style = "display:none" })

    @Html.ValidationMessageFor(m => m.ColumnaId)
</div>
</div>

<div  id="listComparadores"  style="display:none">
<div class="editor-label">
    @Html.LabelFor(m => m.ComparadorId)
</div>
<div class="editor-field">
     @Html.DropDownListWithValidationFor(model => model.ComparadorId, listaComparador.Select(option => new SelectListItem
        {
            Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
            Value = option.ComparadorId.ToString(),
            Selected = ((Model != null) && (option.ComparadorId == Model.ComparadorId))
        }), new { @id = "ComparadorId", @style = "display:none" })

    @Html.ValidationMessageFor(m => m.ComparadorId)
</div>
</div>

<div class="editor-label">
    @Html.LabelFor(m => m.UsuarioId)
</div>
    <div class="editor-field">
    @Html.TextBoxFor(model => model.UsuarioId, new { @rel=" ", @Value = " ", @id = "UsuarioIdAutoComplete" })
    @Html.HiddenFor(model => model.UsuarioId, new { @rel=" ",@Value = " ", @id = "UsuarioId" })
</div>

<div class="editor-label">
    @Html.LabelFor(m => m.TipoUsuario)
</div>
<div class="editor-field">
    @Html.DropDownListWithValidationFor(model => model.TipoUsuarioId, listaTipoUsuario.Select(option => new SelectListItem
        {
            Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
            Value = option.TipoUsuarioId.ToString(),
            Selected = ((Model != null) && (option.TipoUsuarioId == Model.TipoUsuarioId))
        }), new { @id = "TipoUsuarioCreate", @style = "display:none" })

        @Html.ValidationMessageFor(m => m.TipoUsuarioId)
</div>

<div class="editor-label">
    @Html.LabelFor(m => m.Valor)
</div>
<div class="editor-field">
    @Html.TextBoxFor(m => m.Valor)
    @Html.ValidationMessageFor(m => m.Valor)
</div>

<div class="editor-label">
    @Html.LabelFor(m => m.Activa)
</div>
<div class="editor-field">
    @Html.EditorFor(m => m.Activa)
</div>





