constantes
const constanteNumero : numero = 7;
const constanteTexto : texto = 'hola';
const constanteBooleana : booleano = verdadero;
const MaxArreglo : numero = 10;


variables

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var gloNumero,gloNumero2 : numero;
var gloTexto,gloTexto2 : texto;
var gloBooleana,gloBooleana2 : booleano;
var gloarrNumero : arreglo[MaxArreglo] de numero;
var gloarrTexto : arreglo[MaxArreglo] de texto;
var gloarrBooleano : arreglo[MaxArreglo] de booleano;

var N, S : numero;


procedimiento PROC1( i : numero, j : texto, k: booleano)
comenzar

finproc;

procedimiento PROC2(A : arreglo de numero, B : arreglo de texto , C : arreglo de booleano)
comenzar

finproc;

funcion FUNC1( i : numero, j : texto, k: booleano) : numero
comenzar
finfunc i * 2;

funcion FUNC2( i : numero, j : texto, k: booleano) : texto
comenzar
finfunc j & '';

funcion FUNC3( i : numero, j : texto, k: booleano) : booleano
comenzar
finfunc i > 10 and i < 20 or k;

funcion FUNC4( A : arreglo de numero, B : arreglo de texto , C : arreglo de booleano) : numero
comenzar
finfunc A[1] * 2;

funcion FUNC5( A : arreglo de numero, B : arreglo de texto , C : arreglo de booleano) : texto
comenzar
finfunc B[1] & '';

funcion FUNC6( A : arreglo de numero, B : arreglo de texto , C : arreglo de booleano) : booleano
comenzar
finfunc A[1] > 10 and A[2] < 20 or C[1] ;




{intento declarar 2 veces la misma variable}
{intento declarar 2 veces la misma variable pero distinto tipo}

procedimiento ASIGNACIONES_INCORRECTAS_LOCALES()

var A,A : numero;

var A : numero;
var A : texto;
var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
comenzar
	
  vNumero := '';
  vNumero := verdadero;
  vNumero := 6 & '';
  vNumero := 6 - '';
  vNumero := vNumero2 < 10;
  vNumero := vNumero2 and 10;
  vNumero := vTexto;
  vNumero := vBooleana;
  
  vTexto := 515;
  vTexto := verdadero;
  vTexto := 6 & '';
  vTexto := 6 - '';
  vTexto := vTexto2 < 10;
  vTexto := vTexto2 and 10;
  vTexto := vNumero;
  vTexto := vBooleana;
  
  vBooleana := '';
  vBooleana := 505;
  vBooleana := 6 & '';
  vBooleana := 6 - '';
  vBooleana := verdadero < verdadero;
  vBooleana := 6 and 10;
  vBooleana := vTexto;
  vBooleana := vNumero;
  
  
  gloarrNumero[5] := '';
  gloarrNumero[3] := verdadero;
  gloarrNumero[3] := 6 & '';
  gloarrNumero[3] := 6 - '';
  gloarrNumero[3] := vNumero2 < 10;
  gloarrNumero[vNumero] := vNumero2 and 10;
  gloarrNumero[vNumero] := vTexto;
  gloarrNumero[vNumero] := vBooleana;
  

  gloarrTexto[3] := 515;
  gloarrTexto[3] := verdadero;
  gloarrTexto[3] := 6 & '';
  gloarrTexto[3] := 6 - '';
  gloarrTexto[3] := vTexto2 < 10;
  gloarrTexto[3] := vTexto2 and 10;
  gloarrTexto[3] := vNumero;
  gloarrTexto[3] := vBooleana;
  
  gloarrBooleano[3] := '';
  gloarrBooleano[3] := 505;
  gloarrBooleano[3] := 6 & '';
  gloarrBooleano[3] := 6 - '';
  gloarrBooleano[3] := verdadero < verdadero;
  gloarrBooleano[3] := 6 and 10;
  gloarrBooleano[3] := vTexto;
  gloarrBooleano[3] := vNumero;
  
  gloarrNumero := 505;
  gloarrTexto := ' ';
  gloarrBooleano := verdadero;
  
  gloarrNumero[3] := gloarrNumero;
  gloarrTexto[3] := gloarrTexto;
  gloarrBooleano[3] := gloarrBooleano;
  
  gloarrNumero := gloarrNumero[3];
  gloarrTexto := gloarrTexto[3];
  gloarrBooleano := gloarrBooleano[3];
  
  
  gloarrNumero[' '] := 505;
  gloarrTexto[verdadero] := ' ';
  gloarrBooleano[ 505 < 700] := verdadero;
  
finproc;


{
procedimiento ASIGNACIONES_CORRECTAS_GLOBALES()


comenzar
	
  gloNumero := 6;
  gloNumero := -6;
  gloNumero := 6 + 30 - 30 + -30 + -30;
  gloNumero := 6 / 30 / 30 *30*30;
  gloNumero := 6 + gloNumero2;
  gloNumero := 6 - gloNumero2;
  gloNumero := 6 * gloNumero2;
  gloNumero := 6 / gloNumero2;
  gloNumero := gloNumero + gloNumero2;
  gloNumero := gloNumero- gloNumero2;
  gloNumero := gloNumero * gloNumero2;
  gloNumero := gloNumero/ gloNumero2;
  
  gloTexto := 'hola';
  gloTexto := 'hola' & '';
  gloTexto := 'hola' & '' & '';
  gloTexto := gloTexto & gloTexto2;
  gloTexto := gloTexto & gloTexto2;
  gloTexto := gloTexto & gloTexto2;
  gloTexto := gloTexto & gloTexto2; 

  
  gloBooleana := verdadero;
  gloBooleana := falso;
  gloBooleana := ! (verdadero);
  gloBooleana := ! (falso);
  gloBooleana := verdadero and falso;
  gloBooleana := verdadero or falso;
  gloBooleana := ! (verdadero and falso);
  gloBooleana := ! (verdadero or falso);
  gloBooleana := gloBooleana and gloBooleana2;
  gloBooleana := gloBooleana or gloBooleana2;
  gloBooleana := ! (gloBooleana and gloBooleana2);
  gloBooleana := ! (gloBooleana or gloBooleana2);
  
  
  gloBooleana := 6 < 7;
  gloBooleana := 6 > 7;
  gloBooleana := 6 <= 7;
  gloBooleana := 6 >= 7;
  gloBooleana := 6 = 7;
  gloBooleana := 6 <> 7;  
  gloBooleana := gloNumero < gloNumero2;
  gloBooleana := gloNumero > gloNumero2;
  gloBooleana := gloNumero <= gloNumero2;
  gloBooleana := gloNumero >= gloNumero2;
  gloBooleana := gloNumero = gloNumero2;
  gloBooleana := gloNumero <> gloNumero2;
  gloBooleana := ! ( 6 < 7);
  gloBooleana := ! ( 6 > 7);
  gloBooleana := ! ( 6 <= 7);
  gloBooleana := ! ( 6 >= 7);
  gloBooleana := ! ( 6 = 7);
  gloBooleana := ! ( 6 <> 7);  
  gloBooleana := ! ( gloNumero < gloNumero2);
  gloBooleana := ! ( gloNumero > gloNumero2);
  gloBooleana := ! ( gloNumero <= gloNumero2);
  gloBooleana := ! ( gloNumero >= gloNumero2);
  gloBooleana := ! ( gloNumero = gloNumero2);
  gloBooleana := ! ( gloNumero <> gloNumero2);
  gloBooleana := 6 < 7 or 3< 10;
  gloBooleana := 6 > 7 and 3<= 3;
  gloBooleana := 6 <= 7 or (3 = 3);
  gloBooleana := 6 >= 7 or (3) <> 3;
  gloBooleana := 6 = 7 and 3< 3;
  gloBooleana := 6 <> 7 and 3 >= 3;  
  gloBooleana := gloNumero < gloNumero2 and 3< gloNumero2;
  gloBooleana := (gloNumero > gloNumero2) and 3 <= gloNumero2;
  gloBooleana := gloNumero <= gloNumero2 and 3= gloNumero2;
  gloBooleana := gloNumero >= gloNumero2 and 3<> gloNumero2;
  gloBooleana := gloNumero = gloNumero2 and gloNumero2< 3; 
  gloBooleana := gloNumero <> gloNumero2 and gloNumero2>= 3;
  gloBooleana := ! ( 6 < 7and 3< 10);
  gloBooleana := ! ( 6 > 7 and 3<= 3);
  gloBooleana := ! ( 6 <= 7 or  3= 3);
  gloBooleana := ! ( 6 >= 7 and 3<> 3);
  gloBooleana := ! ( 6 = 7 and 3< 3);
  gloBooleana := ! ( 6 <> 7 or  3 >= 3);  
  gloBooleana := ! ( gloNumero < gloNumero2 and 3>= gloNumero2);
  gloBooleana := ! ( gloNumero > gloNumero2 and 3< gloNumero2);
  gloBooleana := ! ( gloNumero <= gloNumero2 or  ((3)> gloNumero2));
  gloBooleana := ! ( gloNumero >= gloNumero2 and 3= gloNumero2);
  gloBooleana := ! ( gloNumero = gloNumero2 or  3<> gloNumero2);
  gloBooleana := ! ( gloNumero <> gloNumero2 and 3<= gloNumero2);
  
  gloBooleana := 'as' = 'h';
  gloBooleana := 'fgh' <> 'rtyr';  
  gloBooleana := gloTexto = gloTexto2;
  gloBooleana := gloTexto <> gloTexto2;
  gloBooleana := ! ( 'as' = 'h');
  gloBooleana := ! ( 'fgh' <> 'rtyr'); 
  gloBooleana := ! ( gloTexto = gloTexto2);
  gloBooleana := ! ( gloTexto <> gloTexto2);
  gloBooleana := 'as' = 'h'  and '' <> 'dfh';
  gloBooleana := 'as' <> 'h' and '' = 'dfgh';  
  gloBooleana := gloTexto = gloTexto2 or '' <> gloTexto; 
  gloBooleana := gloTexto <> gloTexto2 and '' <> gloTexto;
  gloBooleana := ! ( 'as' = 'h' or ('' <> 'dfh'));
  gloBooleana := ! ( ('as' <> 'h') and '' = 'dfgh'); 
  gloBooleana := ! ( (gloTexto = gloTexto2) or  gloTexto2 <> '');
  gloBooleana := ! ( gloTexto <> gloTexto2 and ((gloTexto2) <> ''));
  
finproc;


  }

procedimiento LLAMADAS_PROC_INCORRECTAS()

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var arrNumero : arreglo[MaxArreglo] de numero;
var arrTexto : arreglo[MaxArreglo] de texto;
var arrBooleano : arreglo[MaxArreglo] de booleano;

comenzar

llamar ASIGNACIONES_CORRECTAS_LOCALES(vNumero);
llamar PROC1( vNumero + arrNumero[vNumero+5], arrTexto, vNumero);
llamar PROC1( vNumero + 5 * 4 - arrNumero, vTexto & '', vBooleana and verdadero or arrBooleano[1]);
llamar PROC1( 5 - 5 * vNumero,'' & vTexto, arrBooleano and arrBooleano[1] or 3 < 4);
llamar PROC2(arrNumero[1], arrTexto , vNumero);

finproc;

procedimiento USO_FUNCS_INCORRECTAS()

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var arrNumero : arreglo[MaxArreglo] de numero;
var arrTexto : arreglo[MaxArreglo] de texto;
var arrBooleano : arreglo[MaxArreglo] de booleano;
comenzar

vNumero := FUNC1( arrNumero, vTexto, vBooleana);
vNumero := FUNC1( vNumero + 5 * 4 - arrNumero[1], arrTexto, vBooleana and verdadero or arrBooleano[1]) +5 - 50;
vNumero := FUNC1( 5 - 5 * vNumero,'' & vTexto, arrBooleano) - FUNC1( 3, '', falso ) * FUNC1( 4, '', falso );

vTexto := FUNC2( vNumero + arrNumero[vNumero+5], vTexto, vBooleana,vBooleana);
vTexto := FUNC2( vNumero + 5 * 4 - arrNumero, vTexto & '', vBooleana and verdadero or arrBooleano[1]) & 'hola' & '';
vTexto := FUNC2( 5 - 5 * vNumero,'' & vTexto, arrBooleano[3] and arrBooleano[1] or 3 < 4) & FUNC2( 3, '', falso ) & FUNC2( 4, '', falso );

vBooleana := FUNC3( arrNumero + arrNumero[vNumero+5], vTexto, vBooleana,6);
vBooleana := FUNC3( vNumero + 5 * 4 - arrNumero[1], vTexto & '', 6);
vBooleana := FUNC3( '','' & vTexto, arrBooleano[3] and arrBooleano[1] or 3 < 4) and ! (FUNC3( 3, '', falso )) = verdadero or FUNC1( 4, '', falso ) < 4;

vNumero := FUNC4(arrTexto,  arrBooleano, arrNumero);
vTexto := FUNC5(vNumero, arrTexto , arrBooleano);
vBooleana := !(FUNC6(arrNumero, arrTexto[1] , arrBooleano));

vBooleana := FUNC1( vNumero + arrNumero[vNumero+5], vTexto, vBooleana);
vNumero := FUNC5(arrNumero, arrTexto , arrBooleano);
vTexto := !(FUNC6(arrNumero, arrTexto , arrBooleano));

finproc;

procedimiento USO_LEER_CORRECTAS()

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var arrNumero : arreglo[MaxArreglo] de numero;
var arrTexto : arreglo[MaxArreglo] de texto;
var arrBooleano : arreglo[MaxArreglo] de booleano;
comenzar

leer vNumero;
leer vTexto;
leer vBooleana;
leer arrNumero[1];
leer arrTexto[2];
leer arrBooleano[1];
finproc;

procedimiento USO_MIENTRAS_CORRECTAS()

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var arrNumero : arreglo[MaxArreglo] de numero;
var arrTexto : arreglo[MaxArreglo] de texto;
var arrBooleano : arreglo[MaxArreglo] de booleano;
comenzar

mientras ( 6 < 7 ) hacer

finmientras;

mientras ( verdadero ) hacer
vNumero := FUNC4(arrNumero, arrTexto , arrBooleano);
vTexto := FUNC5(arrNumero, arrTexto , arrBooleano);
vBooleana := !(FUNC6(arrNumero, arrTexto , arrBooleano));
finmientras;

mientras ( (FUNC6(arrNumero, arrTexto , arrBooleano)) ) hacer
vNumero := FUNC4(arrNumero, arrTexto , arrBooleano);
vTexto := FUNC5(arrNumero, arrTexto , arrBooleano);
vBooleana := !(FUNC6(arrNumero, arrTexto , arrBooleano));
finmientras;

finproc;

procedimiento USO_SI_CORRECTAS()

var vNumero,vNumero2 : numero;
var vTexto,vTexto2 : texto;
var vBooleana,vBooleana2 : booleano;
var arrNumero : arreglo[MaxArreglo] de numero;
var arrTexto : arreglo[MaxArreglo] de texto;
var arrBooleano : arreglo[MaxArreglo] de booleano;
comenzar

si ( 6 < 7 ) entonces

sino 

finsi;

si ( verdadero ) entonces
vNumero := FUNC4(arrNumero, arrTexto , arrBooleano);
vTexto := FUNC5(arrNumero, arrTexto , arrBooleano);
vBooleana := !(FUNC6(arrNumero, arrTexto , arrBooleano));
sino
vNumero := 3;
finsi;

si ( (FUNC6(arrNumero, arrTexto , arrBooleano)) ) entonces
vNumero := FUNC4(arrNumero, arrTexto , arrBooleano);
vTexto := FUNC5(arrNumero, arrTexto , arrBooleano);
vBooleana := !(FUNC6(arrNumero, arrTexto , arrBooleano));
sino
arrTexto := '';
finsi;

finproc;





procedimiento SALIDA(A : arreglo de numero)
var I : numero;
comenzar
  I := 1;
  mientras (I <= MaxArreglo) hacer
    Mostrar(A[I]);
  finmientras;
  
  leer I;
  llamar ASIGNACIONES_INCORRECTAS_LOCALES();
  A[1] := I + 6;
  I := A[1] + 6;
  
finproc;

procedimiento PRINCIPAL()
var X: numero;
var A: arreglo[MaxArreglo] de numero;
comenzar
  
  llamar PROC2 (gloarrNumero, gloarrTexto, gloarrBooleano);
  
  llamar PROC2 (gloarrNumero + 1, gloarrTexto & ' ', gloarrBooleano and verdadero);
  
  llamar SALIDA(A); 


finproc;



