@model WebProgramAR.Sitio.Models.RegisterViewModel
@using WebProgramAR.Helpers           

@{
    
    List<WebProgramAR.Entidades.Pais> listaPaises = (List<WebProgramAR.Entidades.Pais>)ViewBag.Paises;
    List<WebProgramAR.Entidades.Provincia> listaProvincias = (List<WebProgramAR.Entidades.Provincia>)ViewBag.Provincias;
    List<WebProgramAR.Entidades.Localidad> listaLocalidades = (List<WebProgramAR.Entidades.Localidad>)ViewBag.Localidades;
    List<WebProgramAR.Entidades.TipoUsuario> listaTipoUsuario = (List<WebProgramAR.Entidades.TipoUsuario>)ViewBag.TipoUsuarios;
}
<div class="sectionSpace">
 @*   @Html.HiddenFor(model => model.UsuarioId)*@

        <fieldset>
            <h3>Informacion de la Cuenta</h3>
         
                <div class="editor-label">
                    @Html.LabelFor(m => m.Usuario.UsuarioNombre)
                </div>
                <div class="editor-field">
                    @if (Model == null)
                    {
                        @Html.TextBoxFor(m => m.Usuario.UsuarioNombre, new { autocomplete = "off" })
                        @Html.ValidationMessageFor(m => m.Usuario.UsuarioNombre)
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.Usuario.UsuarioNombre)
                        @Html.TextBox("TextBoxNombreUsuarioAux", Model.Usuario.UsuarioNombre, new { disabled = "disabled" })
                    }
                </div>
        
            <div class="editor-label">
                @Html.LabelFor(m => m.Usuario.Email)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Usuario.Email, new { autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Usuario.Email)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Contrasena)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.Contrasena, new { autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Contrasena)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(m => m.ConfirmarContrasena)
            </div>
            <div class="editor-field">
                @Html.PasswordFor(m => m.ConfirmarContrasena, new { autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.ConfirmarContrasena)
            </div>

            
        </fieldset>
    </div>
    <div class="sectionSpace">
        <div class="SameSectionSpace">
        <fieldset>
            <h3>Informacion del Usuario</h3>

            <div class="editor-label">
                @Html.LabelFor(m => m.Usuario.Nombre)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Usuario.Nombre)
                @Html.ValidationMessageFor(m => m.Usuario.Nombre)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Usuario.Apellido)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(m => m.Usuario.Apellido)
                @Html.ValidationMessageFor(m => m.Usuario.Apellido)
            </div>

            <div class="editor-label">
                @Html.LabelFor(m => m.Usuario.FechaNacimiento)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.Usuario.FechaNacimiento, new {@readonly="readonly",@id = "Usuario_FechaNacimiento", @class = "date-picker-needed" })
                @Html.ValidationMessageFor(m => m.Usuario.FechaNacimiento)
            </div>
        </fieldset>
        </div>
        <div class="SameSectionSpace">
        <fieldset>
            @if (ViewBag.EsRegister == null || ViewBag.EsRegister == false)
            {
                <div class="editor-label">
                    @Html.LabelFor(model => model.Usuario.TipoUsuario)
                </div>
                <div class="editor-field">
                     @Html.DropDownListWithValidationFor(model => model.Usuario.TipoUsuarioId, listaTipoUsuario.Select(option => new SelectListItem
                {
                    Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                    Value = option.TipoUsuarioId.ToString(),
                    Selected = ((Model != null) && (option.TipoUsuarioId == Model.Usuario.TipoUsuarioId))
                }), new { @id = "SelectTipoUsuarioId", @style = "display:none", @Name = "SelectTipoUsuarioId" })
                @Html.HiddenFor(model => model.Usuario.TipoUsuarioId)
                @Html.ValidationMessageFor(model=> model.Usuario.TipoUsuarioId)
                </div>
            }
            else
            {
                if (Model != null)
                {
                    @Html.HiddenFor(model => model.Usuario.TipoUsuarioId)
                }
                else
                {
                    @Html.Hidden("TipoUsuarioId", 1)
                }
            }
            <div class="editor-label">
                @Html.LabelFor(model => model.Usuario.Pais)
            </div>
            <div class="editor-field">
                 @Html.DropDownListFor(model => model.Usuario.PaisId,
                                listaPaises.Select(option => new SelectListItem
                                {
                                    Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                                    Value = option.PaisId.ToString(),
                                    Selected = ((Model != null) && (option.PaisId.ToString() == Model.Usuario.PaisId))
                                }), "Seleccione una opcion",new { @id = "SelectPaisId", @style = "display:none", @Name = "SelectPaisId" })
                @Html.HiddenFor(model => model.Usuario.PaisId)
                @Html.ValidationMessageFor(model => model.Usuario.PaisId)
            </div>
             <div id="listProvincias" style="display:none">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Usuario.Provincia)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Usuario.ProvinciaId,
                                        listaProvincias.Select(option => new SelectListItem
                                        {
                                            Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
                                            Value = option.ProvinciaId.ToString(),
                                            Selected = ((Model != null) && (option.ProvinciaId.ToString() == Model.Usuario.ProvinciaId.ToString()))
                                        }), "Seleccione una opcion",new { @id = "SelectProvinciaId", @style = "display:none", @Name = "SelectProvinciaId" })
                    @Html.HiddenFor(model => model.Usuario.ProvinciaId)
                    @Html.ValidationMessageFor(m => m.Usuario.ProvinciaId)
                </div>
            </div>
            <div  id="listLocalidades" style="display:none" >
                <div class="editor-label">
                    @Html.LabelFor(m => m.Usuario.Localidad)
                </div>
                 <div class="editor-field">
                    @Html.TextBoxFor(model => model.Usuario.LocalidadId, new { @id = "LocalidadIdAutoComplete", @Name = "LocalidadIdAutoComplete" })
                    @Html.HiddenFor(model => model.Usuario.LocalidadId)
                    @Html.ValidationMessageFor(m => m.Usuario.LocalidadId)
                </div>
            </div>

        </fieldset>
        </div>
    </div>
<script type="text/javascript">
    $("#Usuario_TipoUsuarioId").val(1);
    convertSelect("SelectPaisId",1);
    convertSelect("SelectTipoUsuarioId",1);
    $("#Usuario_FechaNacimiento").datepicker({onSelect:function(){$(this).parents(".editor-field").find(".field-validation-valid").hide()},dateFormat: "yy-mm-dd",minDate:new Date(1920,01,01), changeMonth: true,changeYear: true,yearRange: "1920:1995",maxDate:new Date(new Date().getFullYear()-17,new Date().getMonth(),new Date().getDay())});
    $("#Usuario_FechaNacimiento").keypress(function (event) {
        var charCode = (event.which) ? event.which : event.keyCode
        if (charCode == 8) return false; //  backspace
        if (charCode == 46) return false; // delete
    });

    
    function selectElement(name) {
        $("#select"+name).children().each(function () { $(this).removeAttr("selected"); });
        var selectedElementRel = $("#selectBox_Select" + name).attr("rel");
        $("#Usuario_" + name).val(selectedElementRel);
        $('#select' + name + ' option[value="' + selectedElementRel + '"]').attr("selected", "selected");
    }
    function reInitProvincia() {
        $("#ProvinciaId").val("");
    }
    function reInitLocalidad() {
        $("#Usuario_LocalidadId").val("");
        $("#LocalidadIdAutoComplete").attr("rel", "");
        $("#LocalidadIdAutoComplete").val("");
    }
    function OnChangeDo(div) {
        if (div.attr('id') == "SelectPaisId") {
            var pais = $("#selectBox_SelectPaisId").attr("rel");
            if (pais != 0) {
                $.ajax({
                    url: '@Url.Action("GetProvinciasByPais")',
                    data: " { paisId: '" + pais + "'}",
                    contentType: 'application/json',
                    type: 'POST',
                    dataType: 'json',
                    success: function (data) {
                        $("#listProvincias .tzSelect").remove();
                        $("#SelectProvinciaId").children().remove();
                        var provincias = (typeof data) == 'string' ? eval('(' + data + ')') : data;
                        for (var i = 0; i < provincias.length; i++) {
                            var val = provincias[i].Id;
                            var text = provincias[i].Value;
                            $("#SelectProvinciaId").get(0).options[$("#SelectProvinciaId").get(0).options.length] = new Option(text, val);
                        }
                        $("<option value=''>Seleccion una Opcion</option>").prependTo("#SelectProvinciaId");
                        convertSelect("SelectProvinciaId", 1);
                        $("#Usuario_PaisId").val((div.attr("rel")));
                        $("#selectBox_SelectPaisId").parents(".editor-field").find(".field-validation-valid").hide();
                        reInitProvincia();
                        reInitLocalidad();
                        selectElement("PaisId");

                    }
                });
                $("#listProvincias").show();
            } else {
                $("#listProvincias").hide();
                $("#listLocalidades").hide();
            }
            return;
        }
        if (div.attr('id') == "SelectProvinciaId") {
            if ((div.attr("rel") != 0)) {
                $("#listLocalidades").show();
                $("#Usuario_ProvinciaId").val((div.attr("rel")));
                $("#selectBox_SelectProvinciaId").parents(".editor-field").find(".field-validation-valid").hide();
                        
                selectElement("ProvinciaId");
            } else {
                $("#listLocalidades").hide();
            }
            reInitLocalidad();
            return;
        }
    }

    $("#LocalidadIdAutoComplete").autocomplete({
        source: function (request, response) {
            $.ajax({
                url: '@Url.Action("GetLocalidadesByLocalidadByProvinciaByPais")',
                data: " { paisId: '" + $("#selectBox_SelectPaisId").attr("rel") + "', provinciaId: '" + $("#selectBox_SelectProvinciaId").attr("rel") + "', Localidad: '" + request.term + "' }",
                contentType: 'application/json',
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    if (data == null || data == "") {
                        reInitLocalidad();
                    } else {
                        response($.map(data, function (item) {
                            return {
                                label: item.Value,
                                value: item.Id
                            }
                        }));
                    }
                }
            })

        },
        scrollHeight: 10,
        minChars: 2,
        delay: 300,
        type: 'POST',
        selectFirst: false,
        focus: function (event, ui) {
            $("#LocalidadIdAutoComplete").val(ui.item.label);
            $("#LocalidadIdAutoComplete").parents(".editor-field").find(".field-validation-valid").hide();
            return false;
        },
        select: function (event, ui) {
            $("#Usuario_LocalidadId").val(ui.item.value);
            $("#LocalidadIdAutoComplete").val(ui.item.label);
            $("#LocalidadIdAutoComplete").attr("rel", ui.item.value);
            $("#LocalidadIdAutoComplete").parents(".editor-field").find(".field-validation-valid").hide();
            return false;
        },
        change: function (event, ui) {
            if (ui.item != undefined) {
                $("#Usuario_LocalidadId").val(ui.item.value);
                $("#LocalidadIdAutoComplete").val(ui.item.label);
                $("#LocalidadIdAutoComplete").attr("rel", ui.item.value);
                $("#LocalidadIdAutoComplete").parents(".editor-field").find(".field-validation-valid").hide();
                return false;
            } else {
                reInitLocalidad();
            }
        }
    });
    function verifyCombosOnTheFly() {
        var valid = true;
        if ($("#Usuario_PaisId").val() == "") {
            $("#Usuario_PaisId").parents(".editor-field").find(".field-validation-valid").html("Requerido");
            $("#Usuario_PaisId").parents(".editor-field").find(".field-validation-valid").css({ display: 'block' });
            valid = false;
        }
        if ($("#Usuario_ProvinciaId").val() == "" && $("#listProvincias").css("display")=="block") {
            $("#Usuario_ProvinciaId").parents(".editor-field").find(".field-validation-valid").html("Requerido");
            $("#Usuario_ProvinciaId").parents(".editor-field").find(".field-validation-valid").css({ display: 'block' });
            valid = false;
        }
        if ($("#Usuario_LocalidadId").val() == "" && $("#listLocalidades").css("display") == "block") {
            $("#Usuario_LocalidadId").parents(".editor-field").find(".field-validation-valid").html("Requerido");
            $("#Usuario_LocalidadId").parents(".editor-field").find(".field-validation-valid").css({ display: 'block' });
            valid = false;
        }
        return valid;

    }

    $(document).ready(function () {
        $("#LocalidadIdAutoComplete").keyup(function () { $("#Usuario_LocalidadId").val(""); });
        $("#form0").find("input").live('click', function () {
            $(".update-message-box").hide();
            verifyCombosOnTheFly();
        });
    });            
</script>
