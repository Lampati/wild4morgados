@model WebProgramAR.Sitio.Models.ReglaSeguridadViewModel
           
@using WebProgramAR.Helpers           

@{
    List<WebProgramAR.Entidades.Tabla> listaTabla = (List<WebProgramAR.Entidades.Tabla>)ViewBag.ListaTablas;
    List<WebProgramAR.Entidades.Columna> listaColumna = (List<WebProgramAR.Entidades.Columna>)ViewBag.Columnas;
    List<WebProgramAR.Entidades.Comparador> listaComparador = (List<WebProgramAR.Entidades.Comparador>)ViewBag.Comparadores;
    List<WebProgramAR.Entidades.TipoUsuario> listaTipoUsuario = (List<WebProgramAR.Entidades.TipoUsuario>)ViewBag.ListaTipoUsuarios;
}

<script type="text/javascript">
    $(document).ready(function () {
        $(".input-integer-validation").limitkeypress({ rexp: /^[+]?\d*$/ });
        $(".input-string-validation").limitkeypress({ rexp: /^[A-Za-z _-]*$/ });
        $("#UsuarioIdAutoComplete").keyup(function () {$("#UsuarioId").val("");isValid();});
        $(".input-integer-validation").change(function () { isValid(); });
        $(".input-string-validation").change(function () { isValid(); });
        $("input:radio[name=groupUsuario]").change(function () {checkedRadio();});
        $("#IsValorBool").click(function () { $("#Valor").val($(this).attr('checked') ? 1 : 0); isValid(); });
        $("#ValorInt").keyup(function () { $("#Valor").val($(this).val()); isValid(); });
        $("#ValorText").keyup(function () { $("#Valor").val($(this).val()); isValid(); });
        $("#ValorDate").change(function () { $("#Valor").val($(this).val()); isValid(); });
        isValid();
    });
    function isValid() {
        var valid = false;
        if ($("#selectBox_SelectTablaId").is(":visible") &&
            $("#selectBox_SelectColumnaId").is(":visible") &&
            $("#selectBox_SelectComparadorId").is(":visible") &&
            $("#valorDiv").is(":visible")
            ) {
            if ($("#TablaId").val() != "" &&
                    $("#ColumnaId").val() != "" &&
                    $("#ComparadorId").val() != "" &&
                    $("#Valor").val() != ""
                    ) {
                if ($("input:radio[name=groupUsuario]").filter(":checked").val() == "usuario") {
                    if ($("#UsuarioId").val() != "") {
                        valid = true;
                    }
                } else {
                    valid = true;
                }
            }
        }
        if (valid) {
            $("#btnGuardar").show();
            $("#btnGuardarDisabled").hide();
        } else {
            $("#btnGuardar").hide();
            $("#btnGuardarDisabled").show();
        }
    }

    function checkedRadio() {
        switch ($("input:radio[name=groupUsuario]").filter(":checked").val()) {
            case "tipoUsuario":
                $('#UsuarioIdAutoComplete').attr('readonly', true);
                $('#tipoUsuarioDiv').show();
                $('#usuarioNombreDiv').hide();
                break;
            case "usuario":
            default:
                $('#UsuarioIdAutoComplete').attr('readonly', false);
                $('#tipoUsuarioDiv').hide();
                $('#usuarioNombreDiv').show();
                $('#TipoUsuarioId').val(" ");
                break;
        }
        isValid();
    }
    $("<option value='' selected='selected' >Seleccione una Opcion</option>").prependTo("#SelectTablaId");
    convertSelect("SelectTablaId",1);
    convertSelect("SelectTipoUsuarioCreate",1);
    convertSelect("SelectColumnaId",1);
    convertSelect("SelectComparadorId", 1);
    reSizeWindow();
    function reInitColumnas() {
        $("#ColumnaId").val("-1");
        $("#SelectColumnaId").val("");
        $("#SelectColumnaId").attr("rel", "");
        reInitComparadores();
        $(".error").hide();
    }

    function reInitValor() {
        $("#ValorInt").val("");
        $("#ValorText").val("");
        $("#ValorDate").val("");
        $("#Valor").val("");
        $("#UsuarioId").val("");
        $(".error").hide();
    }
    function reInitComparadores() {
        $("#SelectComparadorId").val("");
        $("#SelectComparadorId").attr("rel", "");
        $("#ComparadorId").val("-1");
        reInitValor();
        $(".error").hide();
    }

    function reSizeWindow() {
        var size = $(".groupElement").filter(":visible").size();
        if (size >= 5) {
            $("#dialog").animate({ height: "530px" });
            $("#dialog").css("overflowY", "auto !important");
        }
        else {
            switch (size) {
                case 2:
                    var totalSize = 380;
                    break;
                case 3:
                    var totalSize = 420;
                    break;
                default:
                    var sizeHeight = ($("#dialog").css("height"));
                    var currentHeight = parseInt(sizeHeight.substring(0, sizeHeight.length - 2));
                    var totalSize = (currentHeight) + parseInt((size - 1) * 40);

            }
            $("#dialog").animate({ height: totalSize + "px" });
            $("#dialog").css("overflowY", "hidden");
        }
    }
    function OnChangeDo(div) {
        if ($(div).attr("rel") != "-1") {
            if (div.attr('id') == "SelectTablaId") {
                var tabla = $("#selectBox_SelectTablaId").attr("rel");
                if (tabla != "") {
                    $.ajax({
                        url: '@Url.Action("GetColumnasByTabla")',
                        data: " { tablaId: '" + tabla + "'}",
                        contentType: 'application/json',
                        type: 'POST',
                        dataType: 'json',
                        success: function (data) {
                            $("#listColumnas .tzSelect").remove();
                            $("#SelectColumnaId").children().remove();
                            var columnas = (typeof data) == 'string' ? eval('(' + data + ')') : data;
                            for (var i = 0; i < columnas.length; i++) {
                                var val = columnas[i].Id;
                                var text = columnas[i].Value;
                                var tipo = columnas[i].TipoDesc;
                                $("#SelectColumnaId").get(0).options[$("#SelectColumnaId").get(0).options.length] = new Option(text, val);
                                $("#SelectColumnaId").children().last().attr("rel", tipo);
                            }
                            $("<option value='' selected='selected'>Seleccione una Opcion</option>").prependTo("#SelectColumnaId");
                            convertSelect("SelectColumnaId", 2);
                            $("#TablaId").val((div.attr("rel")));
                            reInitColumnas();
                            reInitComparadores();
                        }
                    });
                    $("#listColumnas").show();
                } else {
                    $("#listColumnas").hide();
                }
                $("#listComparadores").hide();
                $("#valorDiv").hide();
                $("#usuarioDiv").hide();
                $("#activaDiv").hide();
                reSizeWindow();
                isValid();
                return;
            }
            if (div.attr('id') == "SelectColumnaId") {
                var col = $("#selectBox_SelectColumnaId").attr("rel");
                if (col != "") {
                    $.ajax({
                        url: '@Url.Action("GetComparadoresByColumna")',
                        data: " { colId: '" + col + "'}",
                        contentType: 'application/json',
                        type: 'POST',
                        dataType: 'json',
                        success: function (data) {
                            $("#listComparadores .tzSelect").remove();
                            $("#SelectComparadorId").children().remove();
                            var comparadores = (typeof data) == 'string' ? eval('(' + data + ')') : data;
                            for (var i = 0; i < comparadores.length; i++) {
                                var val = comparadores[i].Id;
                                var text = comparadores[i].Value;
                                $("#SelectComparadorId").get(0).options[$("#SelectComparadorId").get(0).options.length] = new Option(text, val);
                            }
                            $("<option value='' selected='selected'>Seleccione una Opcion</option>").prependTo("#SelectComparadorId");
                            convertSelect("SelectComparadorId", 2);
                            $("#ColumnaId").val((div.attr("rel")));
                            reInitComparadores();
                        }
                    });
                    $("#listComparadores").show();
                    var col = $("#selectBox_SelectColumnaId").attr("rel");
                    var tipo = $("#SelectColumnaId option[value=" + col + "]").attr("rel");
                    $("#tipoColumnaId").val(tipo);
                } else {
                    $("#listComparadores").hide();
                }
                $("#valorDiv").hide();
                $("#usuarioDiv").hide();
                $("#activaDiv").hide();
                reSizeWindow();
                isValid();
                return;
            }
            if (div.attr('id') == "SelectComparadorId") {
                if (div.attr("rel") != "") {
                    $("#ComparadorId").val((div.attr("rel")));
                    showValorDivType();
                    $("#valorDiv").show();
                    $("#usuarioDiv").show();
                    $("#activaDiv").show();
                } else {
                    $("#valorDiv").hide();
                    $("#usuarioDiv").hide();
                    $("#activaDiv").hide();
                }
                reSizeWindow();
                isValid();
                return;
            }
        }
        if (div.attr('id') == "SelectTipoUsuarioCreate") {
            $("#TipoUsuarioId").val((div.attr("rel")));
            isValid();
        }
    }
    function showValorDivType() {
        var tipo = $("#tipoColumnaId").val();
        switch (tipo) {
            case "BOOL":
                $("#valorInteger").hide();
                $("#valorText").hide();
                $("#valorDate").hide();
                $("#valorBool").show();
                break;
            case "INT":
                $("#valorInteger").show();
                $("#valorBool").hide();
                $("#valorText").hide();
                $("#valorDate").hide();
                break;
            case "DATETIME":
                $("#valorText").hide();
                $("#valorBool").hide();
                $("#valorInteger").hide();
                $("#valorDate").show();
                break;
            case "STRING":
                $("#valorText").show();
                $("#valorBool").hide();
                $("#valorInteger").hide();
                $("#valorDate").hide();
                break;
        }
    }
    $("#UsuarioIdAutoComplete").autocomplete({
        source: function (request, response) {
            var xhr = $.ajax({
                url: '@Url.Action("GetUsuariosByNombreUsuario")',
                data: " {user: '" + request.term + "' }",
                contentType: 'application/json',
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    response($.map(data, function (item) {
                        return {
                            label: item.Value,
                            value: item.Id
                        }
                    }));
            xhr.abort();
                }
            })

        },
        scrollHeight: 10,
        minChars: 1,
        delay: 0,
        type: 'POST',
        selectFirst: true,
        focus: function (event, ui) {
            $("#UsuarioIdAutoComplete").attr("rel", ui.item.value);
            isValid();
            return false;
        },
        select: function (event, ui) {
            $("#UsuarioId").val(ui.item.value);
            $("#UsuarioIdAutoComplete").val(ui.item.label);
            $("#UsuarioIdAutoComplete").attr("rel", ui.item.value);
            isValid();
            return false;
        },
        change: function (event, ui) {
            if (ui.item != undefined) {
                $("#UsuarioIdAutoComplete").attr("rel", ui.item.value);
                $("#UsuarioIdAutoComplete").val(ui.item.label);
                $("#UsuarioId").val(ui.item.value);
                isValid();
                return false;
            } 
        }
    });
            
</script>
<div id="tableDiv" class="groupElement">
    <div class="editor-label">
        @Html.LabelFor(m => m.TablaId)
    </div>
    <div class="editor-field">

            @Html.DropDownListWithValidationFor(model => model.TablaId, listaTabla.Select(option => new SelectListItem
            {
                Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
                Value = option.TablaId.ToString(),
                Selected = ((Model != null) && (option.TablaId == Model.TablaId))
            }), new { @id = "SelectTablaId", @style = "display:none", @Name = "SelectTablaId" })
            @Html.HiddenFor(model => Model.TablaId)
            @Html.ValidationMessageFor(m => m.TablaId)
    </div>
</div>
<div id="listColumnas" style="display:none;" class="groupElement">
    <div class="editor-label">
        @Html.LabelFor(m => m.ColumnaId)
    </div>
    <div class="editor-field">
         @Html.DropDownListWithValidationFor(model => model.ColumnaId, listaColumna.Select(option => new SelectListItem
            {
                Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
                Value = option.ColumnaId.ToString(),
                Selected = ((Model != null) && (option.ColumnaId == Model.ComparadorId))
            }), new { @id = "SelectColumnaId", @style = "display:none", @Name = "SelectColumnaId" })
        @Html.HiddenFor(model => Model.ColumnaId)
        @Html.ValidationMessageFor(m => m.ColumnaId)
    </div>
</div>

<div id="listComparadores" style="display:none;" class="groupElement">
    <div class="editor-label">
        @Html.LabelFor(m => m.ComparadorId)
    </div>
    <div class="editor-field">
         @Html.DropDownListWithValidationFor(model => model.ComparadorId, listaComparador.Select(option => new SelectListItem
            {
                Text = Html.DisplayTextFor(_ => option.Nombre).ToString(),
                Value = option.ComparadorId.ToString(),
                Selected = ((Model != null) && (option.ComparadorId == Model.ComparadorId))
            }), new { @id = "SelectComparadorId", @style = "display:none", @Name = "SelectComparadorId" })
        @Html.HiddenFor(model => Model.ComparadorId)
        @Html.ValidationMessageFor(m => m.ComparadorId, "Requerido")
    </div>
</div>
<div id="valorDiv" style="display:none;" class="groupElement">
    <input type="hidden" name="tipoColumnaId" id="tipoColumnaId" />
    <div class="editor-label">
        @Html.LabelFor(m => m.Valor)
        @Html.HiddenFor(model => Model.Valor)
    </div>
    <div id="valorBool" style="display:none;">
        <div class="editor-field">
            @Html.EditorFor(m => m.IsValorBool, new { @id = "ValorBool" })
        </div>
    </div>
    <div id="valorInteger" style="display:none;">
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Valor, new { @class = "input-integer-validation", @size = "20", @id = "ValorInt" })
            @Html.ValidationMessageFor(m => m.Valor)
        </div>
    </div>
    <div id="valorText" style="display:none;">
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Valor, new { @class = "input-string-validation", @size = "20", @id = "ValorText" })
            @Html.ValidationMessageFor(m => m.Valor, "Requerido")
        </div>
    </div>
    <div id="valorDate" style="display:none;">
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Valor, new { @readonly = "readonly", @id = "ValorDate", @class = "date-picker-needed" })
            @Html.ValidationMessageFor(m => m.Valor, "Requerido")
            <script type="text/javascript">
                $("#ValorDate").datepicker({ minDate: new Date(1920, 01, 01), changeMonth: true, changeYear: true });
            </script>
        </div>
    </div>
</div>
<div id="usuarioDiv" style="display:none;" class="groupElement">
    <input type="radio" name="groupUsuario" id="groupUsuario" value="usuario" checked="checked"> Por Usuario<br>
    <div id="usuarioNombreDiv" class="groupElements">
        <div class="editor-label">
            @Html.LabelFor(m => m.UsuarioId)
        </div>
            <div class="editor-field">
            @Html.TextBoxFor(model => model.UsuarioId, new { @Name = "UsuarioIdAutoComplete", @id = "UsuarioIdAutoComplete" })
            @Html.HiddenFor(model => model.UsuarioId)
        </div>
    </div>
    <input type="radio" name="groupUsuario" id="groupUsuario" value="tipoUsuario" > Por Perfil<br>
    <div id="tipoUsuarioDiv" class="groupElements" style="display:none;">
        <div class="editor-label">
            @Html.LabelFor(m => m.TipoUsuarioId)
        </div>
        <div class="editor-field">
            @Html.DropDownListWithValidationFor(model => model.TipoUsuarioId, listaTipoUsuario.Select(option => new SelectListItem
       {
           Text = Html.DisplayTextFor(_ => option.Descripcion).ToString(),
           Value = option.TipoUsuarioId.ToString(),
           Selected = ((Model != null) && (option.TipoUsuarioId == Model.TipoUsuarioId))
       }), new { @readonly = "readonly", @id = "SelectTipoUsuarioCreate", @style = "display:none", @Name = "SelectTipoUsuarioCreate" })
                @Html.HiddenFor(model => Model.TipoUsuarioId)
                @Html.ValidationMessageFor(m => m.TipoUsuarioId)
        </div>
    </div>
</div>
<div id="activaDiv" style="display:none;" class="groupElement">
    <div class="editor-label">
        @Html.LabelFor(m => m.Activa)
    </div>
    <div class="editor-field">
        @Html.EditorFor(m => m.Activa)
    </div>
</div>





