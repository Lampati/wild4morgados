//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace WebProgramAR.Entidades
{
    public partial class Tipo
    {
        #region Primitive Properties
    
        public virtual int TipoId
        {
            get;
            set;
        }
    
        public virtual string Nombre
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Columna> Columnas
        {
            get
            {
                if (_columnas == null)
                {
                    var newCollection = new FixupCollection<Columna>();
                    newCollection.CollectionChanged += FixupColumnas;
                    _columnas = newCollection;
                }
                return _columnas;
            }
            set
            {
                if (!ReferenceEquals(_columnas, value))
                {
                    var previousValue = _columnas as FixupCollection<Columna>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupColumnas;
                    }
                    _columnas = value;
                    var newValue = value as FixupCollection<Columna>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupColumnas;
                    }
                }
            }
        }
        private ICollection<Columna> _columnas;
    
        public virtual ICollection<Comparador> Comparadors
        {
            get
            {
                if (_comparadors == null)
                {
                    var newCollection = new FixupCollection<Comparador>();
                    newCollection.CollectionChanged += FixupComparadors;
                    _comparadors = newCollection;
                }
                return _comparadors;
            }
            set
            {
                if (!ReferenceEquals(_comparadors, value))
                {
                    var previousValue = _comparadors as FixupCollection<Comparador>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComparadors;
                    }
                    _comparadors = value;
                    var newValue = value as FixupCollection<Comparador>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComparadors;
                    }
                }
            }
        }
        private ICollection<Comparador> _comparadors;

        #endregion
        #region Association Fixup
    
        private void FixupColumnas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Columna item in e.NewItems)
                {
                    item.Tipo = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Columna item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tipo, this))
                    {
                        item.Tipo = null;
                    }
                }
            }
        }
    
        private void FixupComparadors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comparador item in e.NewItems)
                {
                    if (!item.Tipoes.Contains(this))
                    {
                        item.Tipoes.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comparador item in e.OldItems)
                {
                    if (item.Tipoes.Contains(this))
                    {
                        item.Tipoes.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
